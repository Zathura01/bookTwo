{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dur = ['monthly', 'quarterly', 'yearly'];\nconst baseBanks = {\n  SBI: 0,\n  AXIS: 0,\n  IDBI: 0,\n  MISC: 0\n};\nconst monthTrack = {\n  '01': ['Jan', {\n    ...baseBanks\n  }],\n  '02': ['Feb', {\n    ...baseBanks\n  }],\n  '03': ['Mar', {\n    ...baseBanks\n  }],\n  '04': ['Apr', {\n    ...baseBanks\n  }],\n  '05': ['May', {\n    ...baseBanks\n  }],\n  '06': ['Jun', {\n    ...baseBanks\n  }],\n  '07': ['Jul', {\n    ...baseBanks\n  }],\n  '08': ['Aug', {\n    ...baseBanks\n  }],\n  '09': ['Sep', {\n    ...baseBanks\n  }],\n  '10': ['Oct', {\n    ...baseBanks\n  }],\n  '11': ['Nov', {\n    ...baseBanks\n  }],\n  '12': ['Dec', {\n    ...baseBanks\n  }]\n};\nfunction Showsave({\n  data\n}) {\n  _s();\n  const [duration, setDuration] = useState('monthly');\n  const [yearSelector, setYearSelector] = useState([]);\n  const dataProcessing = () => {\n    const yearMap = {};\n    data.forEach(entry => {\n      const year = entry.createdAt.slice(0, 4);\n      const month = entry.createdAt.slice(5, 7);\n      const bank = entry.category;\n      const amount = Number(entry.deposit);\n      if (!yearMap[year]) {\n        // Clone a fresh monthTrack with fresh bank objects for immutability\n        yearMap[year] = {};\n        Object.keys(monthTrack).forEach(m => {\n          yearMap[year][m] = [monthTrack[m][0], {\n            ...baseBanks\n          }];\n        });\n      }\n      if (yearMap[year][month]) {\n        if (yearMap[year][month][1][bank] !== undefined) {\n          yearMap[year][month][1][bank] += amount;\n        }\n      }\n    });\n\n    // Convert yearMap to array if needed\n    setYearSelector(Object.entries(yearMap));\n  };\n  useEffect(() => {\n    dataProcessing();\n    console.log(\"this is insight \", yearSelector);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(Showsave, \"Y8v1H//ZXK3hZSxOQK9F2o+CYNw=\");\n_c = Showsave;\nexport default Showsave;\nvar _c;\n$RefreshReg$(_c, \"Showsave\");","map":{"version":3,"names":["React","useState","useEffect","Fragment","_Fragment","jsxDEV","_jsxDEV","dur","baseBanks","SBI","AXIS","IDBI","MISC","monthTrack","Showsave","data","_s","duration","setDuration","yearSelector","setYearSelector","dataProcessing","yearMap","forEach","entry","year","createdAt","slice","month","bank","category","amount","Number","deposit","Object","keys","m","undefined","entries","console","log","_c","$RefreshReg$"],"sources":["C:/web projects/ALW69-BOOK2/book2/src/components/app/insight/details/Showsave.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst dur = ['monthly', 'quarterly', 'yearly'];\r\n\r\nconst baseBanks = { SBI: 0, AXIS: 0, IDBI: 0, MISC: 0 };\r\n\r\nconst monthTrack = {\r\n  '01': ['Jan', { ...baseBanks }],\r\n  '02': ['Feb', { ...baseBanks }],\r\n  '03': ['Mar', { ...baseBanks }],\r\n  '04': ['Apr', { ...baseBanks }],\r\n  '05': ['May', { ...baseBanks }],\r\n  '06': ['Jun', { ...baseBanks }],\r\n  '07': ['Jul', { ...baseBanks }],\r\n  '08': ['Aug', { ...baseBanks }],\r\n  '09': ['Sep', { ...baseBanks }],\r\n  '10': ['Oct', { ...baseBanks }],\r\n  '11': ['Nov', { ...baseBanks }],\r\n  '12': ['Dec', { ...baseBanks }]\r\n};\r\n\r\n\r\nfunction Showsave({ data }) {\r\n\r\n  const [duration, setDuration] = useState('monthly');\r\n  const [yearSelector, setYearSelector] = useState([]);\r\n\r\nconst dataProcessing = () => {\r\n  const yearMap = {};\r\n\r\n  data.forEach(entry => {\r\n    const year = entry.createdAt.slice(0, 4);\r\n    const month = entry.createdAt.slice(5, 7);\r\n    const bank = entry.category;\r\n    const amount = Number(entry.deposit);\r\n\r\n    if (!yearMap[year]) {\r\n      // Clone a fresh monthTrack with fresh bank objects for immutability\r\n      yearMap[year] = {};\r\n      Object.keys(monthTrack).forEach(m => {\r\n        yearMap[year][m] = [monthTrack[m][0], { ...baseBanks }];\r\n      });\r\n    }\r\n\r\n    if (yearMap[year][month]) {\r\n      if (yearMap[year][month][1][bank] !== undefined) {\r\n        yearMap[year][month][1][bank] += amount;\r\n      }\r\n    }\r\n  });\r\n\r\n  // Convert yearMap to array if needed\r\n  setYearSelector(Object.entries(yearMap));\r\n};\r\n\r\n\r\n  useEffect(() => {\r\n    dataProcessing()\r\n    console.log(\"this is insight \",yearSelector);\r\n     \r\n\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default Showsave"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}