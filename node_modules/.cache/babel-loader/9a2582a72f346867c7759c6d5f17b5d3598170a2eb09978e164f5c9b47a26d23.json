{"ast":null,"code":"var _jsxFileName = \"C:\\\\web projects\\\\ALW69-BOOK2\\\\book2\\\\src\\\\components\\\\app\\\\insight\\\\details\\\\Showsave.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst months = {\n  '01': 'Jan',\n  '02': 'Feb',\n  '03': 'Mar',\n  '04': 'Apr',\n  '05': 'May',\n  '06': 'Jun',\n  '07': 'Jul',\n  '08': 'Aug',\n  '09': 'Sep',\n  '10': 'Oct',\n  '11': 'Nov',\n  '12': 'Dec'\n};\nfunction Showsave({\n  data\n}) {\n  _s();\n  // Step 1: Prepare data\n  const {\n    monthList,\n    categoryTotals,\n    dataByCategoryAndMonth\n  } = useMemo(() => {\n    const map = {}; // category -> month -> deposit sum\n    const monthSet = new Set();\n    data.forEach(({\n      category,\n      deposit,\n      date\n    }) => {\n      const d = new Date(date);\n      if (isNaN(d)) return; // skip invalid date\n\n      const monthKey = `${d.getFullYear()}-${('0' + (d.getMonth() + 1)).slice(-2)}`;\n      monthSet.add(monthKey);\n      if (!map[category]) map[category] = {};\n      if (!map[category][monthKey]) map[category][monthKey] = 0;\n      map[category][monthKey] += deposit;\n    });\n\n    // Sort months ascending\n    const monthList = Array.from(monthSet).sort();\n\n    // Calculate totals per month across categories\n    const categoryTotals = {};\n    monthList.forEach(month => {\n      let total = 0;\n      for (const cat in map) {\n        total += map[cat][month] || 0;\n      }\n      categoryTotals[month] = total;\n    });\n    return {\n      monthList,\n      categoryTotals,\n      dataByCategoryAndMonth: map\n    };\n  }, [data]);\n\n  // Show last 3 months by default (scrollable)\n  const visibleMonths = monthList.slice(-3);\n\n  // CSS styles for sticky column and scroll container\n  const styles = {\n    tableContainer: {\n      display: 'flex',\n      overflowX: 'auto',\n      maxWidth: '100%'\n    },\n    stickyColumn: {\n      position: 'sticky',\n      left: 0,\n      background: '#fff',\n      borderRight: '1px solid #ccc',\n      minWidth: 100,\n      zIndex: 2\n    },\n    monthCell: {\n      minWidth: 80,\n      textAlign: 'center',\n      border: '1px solid #ddd',\n      padding: '8px'\n    },\n    totalRow: {\n      fontWeight: 'bold',\n      background: '#f0f0f0'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Saving Insights\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflowX: 'auto',\n        maxWidth: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          borderCollapse: 'collapse',\n          minWidth: '600px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: styles.stickyColumn,\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), monthList.map(month => {\n              const [year, m] = month.split('-');\n              return /*#__PURE__*/_jsxDEV(\"th\", {\n                style: styles.monthCell,\n                children: [months[m], \" \", year]\n              }, month, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.keys(dataByCategoryAndMonth).map(category => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: styles.stickyColumn,\n              children: category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this), monthList.map(month => /*#__PURE__*/_jsxDEV(\"td\", {\n              style: styles.monthCell,\n              children: dataByCategoryAndMonth[category][month] || 0\n            }, month, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 19\n            }, this))]\n          }, category, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            style: styles.totalRow,\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: styles.stickyColumn,\n              children: \"Total\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this), monthList.map(month => /*#__PURE__*/_jsxDEV(\"td\", {\n              style: styles.monthCell,\n              children: categoryTotals[month] || 0\n            }, month, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Showsave, \"xJml63D30AStEhWlcvow6lTUUFo=\");\n_c = Showsave;\nexport default Showsave;\nvar _c;\n$RefreshReg$(_c, \"Showsave\");","map":{"version":3,"names":["React","useMemo","jsxDEV","_jsxDEV","Fragment","_Fragment","months","Showsave","data","_s","monthList","categoryTotals","dataByCategoryAndMonth","map","monthSet","Set","forEach","category","deposit","date","d","Date","isNaN","monthKey","getFullYear","getMonth","slice","add","Array","from","sort","month","total","cat","visibleMonths","styles","tableContainer","display","overflowX","maxWidth","stickyColumn","position","left","background","borderRight","minWidth","zIndex","monthCell","textAlign","border","padding","totalRow","fontWeight","children","fileName","_jsxFileName","lineNumber","columnNumber","style","borderCollapse","year","m","split","Object","keys","_c","$RefreshReg$"],"sources":["C:/web projects/ALW69-BOOK2/book2/src/components/app/insight/details/Showsave.js"],"sourcesContent":["import React, { useMemo } from 'react';\r\n\r\nconst months = {\r\n  '01': 'Jan',\r\n  '02': 'Feb',\r\n  '03': 'Mar',\r\n  '04': 'Apr',\r\n  '05': 'May',\r\n  '06': 'Jun',\r\n  '07': 'Jul',\r\n  '08': 'Aug',\r\n  '09': 'Sep',\r\n  '10': 'Oct',\r\n  '11': 'Nov',\r\n  '12': 'Dec',\r\n};\r\n\r\nfunction Showsave({ data }) {\r\n  // Step 1: Prepare data\r\n  const { monthList, categoryTotals, dataByCategoryAndMonth } = useMemo(() => {\r\n    const map = {}; // category -> month -> deposit sum\r\n    const monthSet = new Set();\r\n\r\n    data.forEach(({ category, deposit, date }) => {\r\n      const d = new Date(date);\r\n      if (isNaN(d)) return; // skip invalid date\r\n\r\n      const monthKey = `${d.getFullYear()}-${('0' + (d.getMonth() + 1)).slice(-2)}`;\r\n      monthSet.add(monthKey);\r\n\r\n      if (!map[category]) map[category] = {};\r\n      if (!map[category][monthKey]) map[category][monthKey] = 0;\r\n      map[category][monthKey] += deposit;\r\n    });\r\n\r\n    // Sort months ascending\r\n    const monthList = Array.from(monthSet).sort();\r\n\r\n    // Calculate totals per month across categories\r\n    const categoryTotals = {};\r\n    monthList.forEach(month => {\r\n      let total = 0;\r\n      for (const cat in map) {\r\n        total += map[cat][month] || 0;\r\n      }\r\n      categoryTotals[month] = total;\r\n    });\r\n\r\n    return { monthList, categoryTotals, dataByCategoryAndMonth: map };\r\n  }, [data]);\r\n\r\n  // Show last 3 months by default (scrollable)\r\n  const visibleMonths = monthList.slice(-3);\r\n\r\n  // CSS styles for sticky column and scroll container\r\n  const styles = {\r\n    tableContainer: {\r\n      display: 'flex',\r\n      overflowX: 'auto',\r\n      maxWidth: '100%',\r\n    },\r\n    stickyColumn: {\r\n      position: 'sticky',\r\n      left: 0,\r\n      background: '#fff',\r\n      borderRight: '1px solid #ccc',\r\n      minWidth: 100,\r\n      zIndex: 2,\r\n    },\r\n    monthCell: {\r\n      minWidth: 80,\r\n      textAlign: 'center',\r\n      border: '1px solid #ddd',\r\n      padding: '8px',\r\n    },\r\n    totalRow: {\r\n      fontWeight: 'bold',\r\n      background: '#f0f0f0',\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4>Saving Insights</h4>\r\n      <div style={{ overflowX: 'auto', maxWidth: '100%' }}>\r\n        <table style={{ borderCollapse: 'collapse', minWidth: '600px' }}>\r\n          <thead>\r\n            <tr>\r\n              <th style={styles.stickyColumn}>Category</th>\r\n              {monthList.map(month => {\r\n                const [year, m] = month.split('-');\r\n                return (\r\n                  <th key={month} style={styles.monthCell}>\r\n                    {months[m]} {year}\r\n                  </th>\r\n                );\r\n              })}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(dataByCategoryAndMonth).map(category => (\r\n              <tr key={category}>\r\n                <td style={styles.stickyColumn}>{category}</td>\r\n                {monthList.map(month => (\r\n                  <td key={month} style={styles.monthCell}>\r\n                    {dataByCategoryAndMonth[category][month] || 0}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n          <tfoot>\r\n            <tr style={styles.totalRow}>\r\n              <td style={styles.stickyColumn}>Total</td>\r\n              {monthList.map(month => (\r\n                <td key={month} style={styles.monthCell}>\r\n                  {categoryTotals[month] || 0}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          </tfoot>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Showsave;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}