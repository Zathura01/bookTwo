{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dur = ['monthly', 'quarterly', 'yearly'];\nconst banks = {\n  'SBI': 0,\n  'AXIS': 0,\n  'IDBI': 0,\n  'MISC': 0\n};\nconst monthTrack = {\n  '01': ['Jan', banks],\n  '02': ['Feb', banks],\n  '03': ['Mar', banks],\n  '04': ['Apr', banks],\n  '05': ['May', banks],\n  '06': ['Jun', banks],\n  '07': ['Jul', banks],\n  '08': ['Aug', banks],\n  '09': ['Sep', banks],\n  '10': ['Oct', banks],\n  '11': ['Nov', banks],\n  '12': ['Dec', banks]\n};\nfunction Showsave({\n  data\n}) {\n  _s();\n  const [duration, setDuration] = useState('monthly');\n  const [yearSelector, setYearSelector] = useState([]);\n  const dataProcessing = async () => {\n    let years = [];\n    data.forEach(element => {\n      let year = element.createdAt.slice(0, 4);\n      years.push([year, monthTrack]);\n    });\n    setYearSelector(years);\n    yearSelector.forEach(elemyear => {\n      data.forEach(elemdata => {\n        if (elemyear[0] === elemdata.createdAt.slice(0, 4)) {\n          let month = elemdata.createAt.slice(5, 7);\n          Object.keys(elemyear[1]).forEach(key => {\n            if (key === month) {\n              let newObj = elemyear[1][key];\n              let dbBank = data.category;\n              Object.keys(newObj[1]).forEach();\n            }\n          });\n        }\n      });\n    });\n  };\n  useEffect(() => {\n    console.log(data);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(Showsave, \"Y8v1H//ZXK3hZSxOQK9F2o+CYNw=\");\n_c = Showsave;\nexport default Showsave;\nvar _c;\n$RefreshReg$(_c, \"Showsave\");","map":{"version":3,"names":["React","useState","useEffect","Fragment","_Fragment","jsxDEV","_jsxDEV","dur","banks","monthTrack","Showsave","data","_s","duration","setDuration","yearSelector","setYearSelector","dataProcessing","years","forEach","element","year","createdAt","slice","push","elemyear","elemdata","month","createAt","Object","keys","key","newObj","dbBank","category","console","log","_c","$RefreshReg$"],"sources":["C:/web projects/ALW69-BOOK2/book2/src/components/app/insight/details/Showsave.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst dur = ['monthly', 'quarterly', 'yearly']\r\n\r\nconst banks = { 'SBI':0, 'AXIS':0, 'IDBI':0, 'MISC':0};\r\n\r\nconst monthTrack = {\r\n  '01': ['Jan', banks], '02': ['Feb', banks], '03': ['Mar', banks], '04': ['Apr', banks],\r\n  '05': ['May', banks], '06': ['Jun', banks], '07': ['Jul', banks], '08': ['Aug', banks],\r\n  '09': ['Sep', banks], '10': ['Oct', banks], '11': ['Nov', banks], '12': ['Dec', banks]\r\n};\r\n\r\n\r\nfunction Showsave({ data }) {\r\n\r\n  const [duration, setDuration] = useState('monthly');\r\n  const [yearSelector, setYearSelector] = useState([]);\r\n\r\n\r\n  const dataProcessing = async () => {\r\n\r\n    let years = []\r\n    data.forEach(element => {\r\n      let year = element.createdAt.slice(0, 4);\r\n      years.push([year, monthTrack]);\r\n    });\r\n    setYearSelector(years);\r\n\r\n    yearSelector.forEach(elemyear => {\r\n      data.forEach(elemdata => {\r\n        if (elemyear[0] === elemdata.createdAt.slice(0, 4)) {\r\n          let month = elemdata.createAt.slice(5, 7)\r\n          Object.keys(elemyear[1]).forEach(key => {\r\n            if(key === month){\r\n              let newObj = elemyear[1][key];\r\n              let dbBank = data.category;\r\n              Object.keys(newObj[1]).forEach()\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    console.log(data);\r\n\r\n\r\n\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default Showsave"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}